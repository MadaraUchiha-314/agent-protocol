# generated by fastapi-codegen:
#   filename:  openapi.json

from __future__ import annotations

from fastapi import APIRouter

from ..models import (
    Action,
    Any,
    ErrorResponse,
    Optional,
    Run,
    RunCreate,
    RunWaitResponse,
    ThreadsThreadIdRunsGetResponse,
    UUID,
    Union,
)

router = APIRouter(tags=["Background Runs"])


@router.post(
    "/runs",
    response_model=Any,
    responses={
        "404": {"model": ErrorResponse},
        "409": {"model": ErrorResponse},
        "422": {"model": ErrorResponse},
    },
    tags=["Background Runs"],
)
def create_run(body: RunCreate) -> Union[Any, ErrorResponse]:
    """
    Create Background Run
    """
    pass


@router.get(
    "/runs/{run_id}",
    response_model=Run,
    responses={"404": {"model": ErrorResponse}, "422": {"model": ErrorResponse}},
    tags=["Background Runs"],
)
def get_run(run_id: UUID) -> Union[Run, ErrorResponse]:
    """
    Get Run
    """
    pass


@router.delete(
    "/runs/{run_id}",
    response_model=None,
    status_code=204,
    responses={"404": {"model": ErrorResponse}, "422": {"model": ErrorResponse}},
    tags=["Background Runs"],
)
def delete_run(run_id: UUID) -> Optional[ErrorResponse]:
    """
    Delete Run
    """
    pass


@router.post(
    "/runs/{run_id}/cancel",
    response_model=None,
    status_code=204,
    responses={"404": {"model": ErrorResponse}, "422": {"model": ErrorResponse}},
    tags=["Background Runs"],
)
def cancel_run(
    run_id: UUID, wait: Optional[bool] = False, action: Optional[Action] = "interrupt"
) -> Optional[ErrorResponse]:
    """
    Cancel Run
    """
    pass


@router.get(
    "/runs/{run_id}/stream",
    response_model=Any,
    responses={"404": {"model": ErrorResponse}, "422": {"model": ErrorResponse}},
    tags=["Background Runs"],
)
def stream_run(run_id: UUID) -> Union[Any, ErrorResponse]:
    """
    Stream output from Run
    """
    pass


@router.get(
    "/runs/{run_id}/wait",
    response_model=RunWaitResponse,
    responses={"404": {"model": ErrorResponse}, "422": {"model": ErrorResponse}},
    tags=["Background Runs"],
)
def wait_run(run_id: UUID) -> Union[RunWaitResponse, ErrorResponse]:
    """
    Wait for Run output
    """
    pass


@router.get(
    "/threads/{thread_id}/runs",
    response_model=ThreadsThreadIdRunsGetResponse,
    responses={"404": {"model": ErrorResponse}, "422": {"model": ErrorResponse}},
    tags=["Background Runs"],
)
def search_thread_runs(
    thread_id: UUID, limit: Optional[int] = 10, offset: Optional[int] = 0
) -> Union[ThreadsThreadIdRunsGetResponse, ErrorResponse]:
    """
    Search Thread Runs
    """
    pass
